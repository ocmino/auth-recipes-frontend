"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
var react_1 = require("react");
var Router = /** @class */ (function (_super) {
    __extends(Router, _super);
    function Router(props) {
        var _this = _super.call(this, props) || this;
        _this.state = { currentRoutePath: window.location.pathname };
        Router.Instance = _this;
        return _this;
    }
    Router.prototype.componentDidMount = function () {
        var _this = this;
        this.historyDidChange(window.location.pathname);
        window.addEventListener("popstate", function (event) {
            _this.historyDidChange(window.location.pathname);
            event.preventDefault();
        });
    };
    Router.prototype.push = function (routePath, parameters) {
        if (typeof parameters === "object")
            for (var _key in parameters)
                routePath = routePath.replace(":" + _key, parameters[_key]);
        var _route = this.findRoute(routePath);
        window.history.pushState({ path: _route.path }, "", routePath);
        this.historyDidChange(routePath);
    };
    Router.prototype.replace = function (routePath, parameters) {
        if (typeof parameters === "object")
            for (var _key in parameters)
                routePath = routePath.replace(":" + _key, parameters[_key]);
        var _route = this.findRoute(routePath);
        window.history.replaceState({ path: _route.path }, "", routePath);
        this.historyDidChange(routePath);
    };
    Router.prototype.historyDidChange = function (routePath) {
        var _this = this;
        window.scrollTo(0, 0);
        var _route = this.findRoute(routePath);
        if (typeof this.props.onRouteWillChange !== "undefined")
            this.props.onRouteWillChange(_route);
        this.setState({ currentRoutePath: routePath }, function () {
            if (typeof _this.props.onRouteDidChange !== "undefined")
                _this.props.onRouteDidChange(_route);
        });
    };
    Router.prototype.findRoute = function (routePath) {
        var _targetRoutePath = routePath.split("?")[0].split("#")[0];
        var _splittedTargetRoutePath = _targetRoutePath.split("/").splice(1);
        for (var _a = 0, _b = this.props.routes; _a < _b.length; _a++) {
            var _route = _b[_a];
            var _isMatching = true;
            var _splittedRoutePath = _route.path.split("/").splice(1);
            if (_splittedRoutePath.length !== _splittedTargetRoutePath.length)
                _isMatching = false;
            for (var _i = 0; _i < _splittedRoutePath.length; _i++) {
                var _isParam = _splittedRoutePath[_i].charAt(0) === ":";
                if (_isParam === false)
                    if (_splittedRoutePath[_i] !== _splittedTargetRoutePath[_i])
                        _isMatching = false;
            }
            if (_isMatching === true) {
                return _route;
            }
        }
        return this.props.routes[0];
    };
    Router.prototype.getCurrentParams = function (route) {
        var _params = {};
        var _splittedCurrentRoutePath = this.state.currentRoutePath.split("/");
        var _splittedRoutePath = route.path.split("/");
        for (var _i = 0; _i < _splittedRoutePath.length; _i++)
            if (_splittedRoutePath[_i].charAt(0) === ":") {
                var _key = _splittedRoutePath[_i].split(":")[1];
                var _value = _splittedCurrentRoutePath[_i];
                _params[_key] = _value;
            }
        return _params;
    };
    Router.prototype.getCurrentQueries = function () {
        var _queries = {};
        var _searches = unescape(location.search.substring(1)).split("&");
        if (location.search.length > 0)
            for (var _a = 0, _searches_1 = _searches; _a < _searches_1.length; _a++) {
                var _search = _searches_1[_a];
                var _splittedSearch = _search.split("=");
                if (_splittedSearch.length === 1) {
                    _queries[_splittedSearch[0]] = true;
                }
                else
                    _queries[_splittedSearch[0]] = _splittedSearch
                        .filter(function (_, _index) { return _index !== 0; })
                        .join("=");
            }
        return _queries;
    };
    Router.prototype.render = function () {
        var _route = this.findRoute(this.state.currentRoutePath);
        return react_1.createElement(_route.component, {
            routing: {
                route: _route,
                params: this.getCurrentParams(_route),
                queries: this.getCurrentQueries()
            }
        });
    };
    Router.push = function (routePath, parameters) { return Router.Instance.push(routePath, parameters); };
    Router.replace = function (routePath, parameters) { return Router.Instance.replace(routePath, parameters); };
    Router.back = function () { return window.history.back(); };
    Router.forward = function () { return window.history.forward(); };
    Router.go = function (delta) { return window.history.go(delta); };
    return Router;
}(react_1.Component));
exports.Router = Router;
